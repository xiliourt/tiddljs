"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtistFullSchema = exports.PlaylistSchema = exports.AlbumFullSchema = exports.VideoSchema = exports.TrackSchema = exports.AlbumSchema = exports.ArtistSchema = void 0;
const zod_1 = require("zod");
const constants_1 = require("./constants");
exports.ArtistSchema = zod_1.z.object({
    id: zod_1.z.number(),
    name: zod_1.z.string(),
    type: zod_1.z.string().optional(),
    picture: zod_1.z.string().nullable().optional(),
});
exports.AlbumSchema = zod_1.z.object({
    id: zod_1.z.number(),
    title: zod_1.z.string(),
    cover: zod_1.z.string().nullable().optional(),
    vibrantColor: zod_1.z.string().nullable().optional(),
    videoCover: zod_1.z.string().nullable().optional(),
});
exports.TrackSchema = zod_1.z.object({
    id: zod_1.z.number(),
    title: zod_1.z.string(),
    duration: zod_1.z.number(),
    replayGain: zod_1.z.number(),
    peak: zod_1.z.number(),
    allowStreaming: zod_1.z.boolean(),
    streamReady: zod_1.z.boolean(),
    adSupportedStreamReady: zod_1.z.boolean(),
    djReady: zod_1.z.boolean(),
    stemReady: zod_1.z.boolean(),
    streamStartDate: zod_1.z.string().nullable().optional(),
    premiumStreamingOnly: zod_1.z.boolean(),
    trackNumber: zod_1.z.number(),
    volumeNumber: zod_1.z.number(),
    version: zod_1.z.string().nullable().optional(),
    popularity: zod_1.z.number(),
    copyright: zod_1.z.string().nullable().optional(),
    bpm: zod_1.z.number().nullable().optional(),
    url: zod_1.z.string().url(),
    isrc: zod_1.z.string(),
    editable: zod_1.z.boolean(),
    explicit: zod_1.z.boolean(),
    audioQuality: constants_1.TrackQualitySchema,
    audioModes: zod_1.z.array(zod_1.z.string()),
    mediaMetadata: zod_1.z.record(zod_1.z.array(zod_1.z.string())),
    artist: exports.ArtistSchema.nullable().optional(),
    artists: zod_1.z.array(exports.ArtistSchema),
    album: exports.AlbumSchema,
    mixes: zod_1.z.record(zod_1.z.string()).nullable().optional(),
});
exports.VideoSchema = zod_1.z.object({
    id: zod_1.z.number(),
    title: zod_1.z.string(),
    volumeNumber: zod_1.z.number(),
    trackNumber: zod_1.z.number(),
    releaseDate: zod_1.z.string().nullable().optional(),
    imagePath: zod_1.z.string().nullable().optional(),
    imageId: zod_1.z.string(),
    vibrantColor: zod_1.z.string().nullable().optional(),
    duration: zod_1.z.number(),
    quality: zod_1.z.string(),
    streamReady: zod_1.z.boolean(),
    adSupportedStreamReady: zod_1.z.boolean(),
    djReady: zod_1.z.boolean(),
    stemReady: zod_1.z.boolean(),
    streamStartDate: zod_1.z.string().nullable().optional(),
    allowStreaming: zod_1.z.boolean(),
    explicit: zod_1.z.boolean(),
    popularity: zod_1.z.number(),
    type: zod_1.z.string(),
    adsUrl: zod_1.z.string().url().nullable().optional(),
    adsPrePaywallOnly: zod_1.z.boolean(),
    artist: exports.ArtistSchema.nullable().optional(),
    artists: zod_1.z.array(exports.ArtistSchema),
    album: exports.AlbumSchema.nullable().optional(),
});
exports.AlbumFullSchema = exports.AlbumSchema.extend({
    duration: zod_1.z.number(),
    streamReady: zod_1.z.boolean(),
    adSupportedStreamReady: zod_1.z.boolean(),
    djReady: zod_1.z.boolean(),
    stemReady: zod_1.z.boolean(),
    allowStreaming: zod_1.z.boolean(),
    premiumStreamingOnly: zod_1.z.boolean(),
    numberOfTracks: zod_1.z.number(),
    numberOfVideos: zod_1.z.number(),
    numberOfVolumes: zod_1.z.number(),
    releaseDate: zod_1.z.string().nullable().optional(),
    copyright: zod_1.z.string().nullable().optional(),
    type: zod_1.z.string(),
    version: zod_1.z.string().nullable().optional(),
    url: zod_1.z.string().url(),
    cover: zod_1.z.string().nullable().optional(),
    vibrantColor: zod_1.z.string().nullable().optional(),
    videoCover: zod_1.z.string().nullable().optional(),
    explicit: zod_1.z.boolean(),
    upc: zod_1.z.string(),
    popularity: zod_1.z.number(),
    audioQuality: zod_1.z.string(),
    audioModes: zod_1.z.array(zod_1.z.string()),
    mediaMetadata: zod_1.z.object({
        tags: zod_1.z.array(zod_1.z.enum(['LOSSLESS', 'HIRES_LOSSLESS', 'DOLBY_ATMOS'])),
    }),
    artist: exports.ArtistSchema,
    artists: zod_1.z.array(exports.ArtistSchema),
});
exports.PlaylistSchema = zod_1.z.object({
    uuid: zod_1.z.string(),
    title: zod_1.z.string(),
    numberOfTracks: zod_1.z.number(),
    numberOfVideos: zod_1.z.number(),
    creator: zod_1.z.union([zod_1.z.object({ id: zod_1.z.number() }), zod_1.z.record(zod_1.z.any())]),
    description: zod_1.z.string().nullable().optional(),
    duration: zod_1.z.number(),
    lastUpdated: zod_1.z.string().datetime(),
    created: zod_1.z.string().datetime(),
    type: zod_1.z.string(),
    publicPlaylist: zod_1.z.boolean(),
    url: zod_1.z.string().url(),
    image: zod_1.z.string().nullable().optional(),
    popularity: zod_1.z.number(),
    squareImage: zod_1.z.string(),
    promotedArtists: zod_1.z.array(exports.ArtistSchema),
    lastItemAddedAt: zod_1.z.string().datetime().nullable().optional(),
});
exports.ArtistFullSchema = exports.ArtistSchema.extend({
    artistTypes: zod_1.z.array(zod_1.z.enum(['ARTIST', 'CONTRIBUTOR'])).optional(),
    url: zod_1.z.string().url().optional(),
    picture: zod_1.z.string().nullable().optional(),
    selectedAlbumCoverFallback: zod_1.z.string().optional(),
    popularity: zod_1.z.number().optional(),
    artistRoles: zod_1.z.array(zod_1.z.object({
        categoryId: zod_1.z.number(),
        category: zod_1.z.enum(['Artist', 'Songwriter', 'Performer', 'Producer', 'Engineer', 'Production team', 'Misc']),
    })).nullable().optional(),
    mixes: zod_1.z.record(zod_1.z.string()).nullable().optional(),
});
